/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "submission_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace astraea { namespace thrift { namespace mq {


ProblemLimit::~ProblemLimit() noexcept {
}


void ProblemLimit::__set_compilation_time(const int32_t val) {
  this->compilation_time = val;
}

void ProblemLimit::__set_time(const int32_t val) {
  this->time = val;
}

void ProblemLimit::__set_time_multiplier(const double val) {
  this->time_multiplier = val;
}

void ProblemLimit::__set_compilation_memory(const int32_t val) {
  this->compilation_memory = val;
}

void ProblemLimit::__set_memory(const int32_t val) {
  this->memory = val;
}

void ProblemLimit::__set_mem_multiplier(const double val) {
  this->mem_multiplier = val;
}

void ProblemLimit::__set_compilation_output(const int32_t val) {
  this->compilation_output = val;
}

void ProblemLimit::__set_output(const int32_t val) {
  this->output = val;
}
std::ostream& operator<<(std::ostream& out, const ProblemLimit& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ProblemLimit::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_time = false;
  bool isset_memory = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->compilation_time);
          this->__isset.compilation_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->time);
          isset_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->time_multiplier);
          this->__isset.time_multiplier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->compilation_memory);
          this->__isset.compilation_memory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->memory);
          isset_memory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->mem_multiplier);
          this->__isset.mem_multiplier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->compilation_output);
          this->__isset.compilation_output = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->output);
          this->__isset.output = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_time)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_memory)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProblemLimit::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProblemLimit");

  xfer += oprot->writeFieldBegin("compilation_time", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->compilation_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time_multiplier", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->time_multiplier);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("compilation_memory", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->compilation_memory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("memory", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->memory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mem_multiplier", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->mem_multiplier);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("compilation_output", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->compilation_output);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("output", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->output);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProblemLimit &a, ProblemLimit &b) {
  using ::std::swap;
  swap(a.compilation_time, b.compilation_time);
  swap(a.time, b.time);
  swap(a.time_multiplier, b.time_multiplier);
  swap(a.compilation_memory, b.compilation_memory);
  swap(a.memory, b.memory);
  swap(a.mem_multiplier, b.mem_multiplier);
  swap(a.compilation_output, b.compilation_output);
  swap(a.output, b.output);
  swap(a.__isset, b.__isset);
}

ProblemLimit::ProblemLimit(const ProblemLimit& other0) {
  compilation_time = other0.compilation_time;
  time = other0.time;
  time_multiplier = other0.time_multiplier;
  compilation_memory = other0.compilation_memory;
  memory = other0.memory;
  mem_multiplier = other0.mem_multiplier;
  compilation_output = other0.compilation_output;
  output = other0.output;
  __isset = other0.__isset;
}
ProblemLimit& ProblemLimit::operator=(const ProblemLimit& other1) {
  compilation_time = other1.compilation_time;
  time = other1.time;
  time_multiplier = other1.time_multiplier;
  compilation_memory = other1.compilation_memory;
  memory = other1.memory;
  mem_multiplier = other1.mem_multiplier;
  compilation_output = other1.compilation_output;
  output = other1.output;
  __isset = other1.__isset;
  return *this;
}
void ProblemLimit::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProblemLimit(";
  out << "compilation_time=" << to_string(compilation_time);
  out << ", " << "time=" << to_string(time);
  out << ", " << "time_multiplier=" << to_string(time_multiplier);
  out << ", " << "compilation_memory=" << to_string(compilation_memory);
  out << ", " << "memory=" << to_string(memory);
  out << ", " << "mem_multiplier=" << to_string(mem_multiplier);
  out << ", " << "compilation_output=" << to_string(compilation_output);
  out << ", " << "output=" << to_string(output);
  out << ")";
}


SubmissinoInfo::~SubmissinoInfo() noexcept {
}


void SubmissinoInfo::__set_id(const std::string& val) {
  this->id = val;
}

void SubmissinoInfo::__set_problem(const std::string& val) {
  this->problem = val;
}

void SubmissinoInfo::__set_language(const std::string& val) {
  this->language = val;
}

void SubmissinoInfo::__set_extensions(const std::vector<std::string> & val) {
  this->extensions = val;
}

void SubmissinoInfo::__set_code(const std::string& val) {
  this->code = val;
}

void SubmissinoInfo::__set_limits(const ProblemLimit& val) {
  this->limits = val;
}

void SubmissinoInfo::__set_problem_testcase_last_update(const std::string& val) {
  this->problem_testcase_last_update = val;
__isset.problem_testcase_last_update = true;
}

void SubmissinoInfo::__set_script_last_update(const std::string& val) {
  this->script_last_update = val;
__isset.script_last_update = true;
}
std::ostream& operator<<(std::ostream& out, const SubmissinoInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SubmissinoInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;
  bool isset_problem = false;
  bool isset_language = false;
  bool isset_extensions = false;
  bool isset_code = false;
  bool isset_limits = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->problem);
          isset_problem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->language);
          isset_language = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->extensions.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->extensions.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += iprot->readString(this->extensions[_i6]);
            }
            xfer += iprot->readListEnd();
          }
          isset_extensions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->code);
          isset_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->limits.read(iprot);
          isset_limits = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->problem_testcase_last_update);
          this->__isset.problem_testcase_last_update = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->script_last_update);
          this->__isset.script_last_update = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_problem)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_language)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_extensions)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_limits)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SubmissinoInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SubmissinoInfo");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("problem", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->problem);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("language", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->language);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("extensions", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->extensions.size()));
    std::vector<std::string> ::const_iterator _iter7;
    for (_iter7 = this->extensions.begin(); _iter7 != this->extensions.end(); ++_iter7)
    {
      xfer += oprot->writeString((*_iter7));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limits", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->limits.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.problem_testcase_last_update) {
    xfer += oprot->writeFieldBegin("problem_testcase_last_update", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->problem_testcase_last_update);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.script_last_update) {
    xfer += oprot->writeFieldBegin("script_last_update", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->script_last_update);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SubmissinoInfo &a, SubmissinoInfo &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.problem, b.problem);
  swap(a.language, b.language);
  swap(a.extensions, b.extensions);
  swap(a.code, b.code);
  swap(a.limits, b.limits);
  swap(a.problem_testcase_last_update, b.problem_testcase_last_update);
  swap(a.script_last_update, b.script_last_update);
  swap(a.__isset, b.__isset);
}

SubmissinoInfo::SubmissinoInfo(const SubmissinoInfo& other8) {
  id = other8.id;
  problem = other8.problem;
  language = other8.language;
  extensions = other8.extensions;
  code = other8.code;
  limits = other8.limits;
  problem_testcase_last_update = other8.problem_testcase_last_update;
  script_last_update = other8.script_last_update;
  __isset = other8.__isset;
}
SubmissinoInfo& SubmissinoInfo::operator=(const SubmissinoInfo& other9) {
  id = other9.id;
  problem = other9.problem;
  language = other9.language;
  extensions = other9.extensions;
  code = other9.code;
  limits = other9.limits;
  problem_testcase_last_update = other9.problem_testcase_last_update;
  script_last_update = other9.script_last_update;
  __isset = other9.__isset;
  return *this;
}
void SubmissinoInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SubmissinoInfo(";
  out << "id=" << to_string(id);
  out << ", " << "problem=" << to_string(problem);
  out << ", " << "language=" << to_string(language);
  out << ", " << "extensions=" << to_string(extensions);
  out << ", " << "code=" << to_string(code);
  out << ", " << "limits=" << to_string(limits);
  out << ", " << "problem_testcase_last_update="; (__isset.problem_testcase_last_update ? (out << to_string(problem_testcase_last_update)) : (out << "<null>"));
  out << ", " << "script_last_update="; (__isset.script_last_update ? (out << to_string(script_last_update)) : (out << "<null>"));
  out << ")";
}

}}} // namespace
