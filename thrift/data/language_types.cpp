/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "language_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace astraea { namespace thrift { namespace data {


Language::~Language() noexcept {
}


void Language::__set_id(const std::string& val) {
  this->id = val;
}

void Language::__set_name(const std::string& val) {
  this->name = val;
}

void Language::__set_extensions(const std::vector<std::string> & val) {
  this->extensions = val;
}

void Language::__set_time_multiplier(const double val) {
  this->time_multiplier = val;
__isset.time_multiplier = true;
}

void Language::__set_mem_multiplier(const double val) {
  this->mem_multiplier = val;
__isset.mem_multiplier = true;
}

void Language::__set_compile_script(const std::string& val) {
  this->compile_script = val;
__isset.compile_script = true;
}

void Language::__set_run_script(const std::string& val) {
  this->run_script = val;
__isset.run_script = true;
}

void Language::__set_script_last_update(const std::string& val) {
  this->script_last_update = val;
__isset.script_last_update = true;
}
std::ostream& operator<<(std::ostream& out, const Language& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Language::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;
  bool isset_name = false;
  bool isset_extensions = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->extensions.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->extensions.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->extensions[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          isset_extensions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->time_multiplier);
          this->__isset.time_multiplier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->mem_multiplier);
          this->__isset.mem_multiplier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->compile_script);
          this->__isset.compile_script = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->run_script);
          this->__isset.run_script = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->script_last_update);
          this->__isset.script_last_update = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_extensions)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Language::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Language");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("extensions", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->extensions.size()));
    std::vector<std::string> ::const_iterator _iter5;
    for (_iter5 = this->extensions.begin(); _iter5 != this->extensions.end(); ++_iter5)
    {
      xfer += oprot->writeString((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.time_multiplier) {
    xfer += oprot->writeFieldBegin("time_multiplier", ::apache::thrift::protocol::T_DOUBLE, 5);
    xfer += oprot->writeDouble(this->time_multiplier);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mem_multiplier) {
    xfer += oprot->writeFieldBegin("mem_multiplier", ::apache::thrift::protocol::T_DOUBLE, 6);
    xfer += oprot->writeDouble(this->mem_multiplier);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.compile_script) {
    xfer += oprot->writeFieldBegin("compile_script", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->compile_script);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.run_script) {
    xfer += oprot->writeFieldBegin("run_script", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->run_script);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.script_last_update) {
    xfer += oprot->writeFieldBegin("script_last_update", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->script_last_update);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Language &a, Language &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.extensions, b.extensions);
  swap(a.time_multiplier, b.time_multiplier);
  swap(a.mem_multiplier, b.mem_multiplier);
  swap(a.compile_script, b.compile_script);
  swap(a.run_script, b.run_script);
  swap(a.script_last_update, b.script_last_update);
  swap(a.__isset, b.__isset);
}

Language::Language(const Language& other6) {
  id = other6.id;
  name = other6.name;
  extensions = other6.extensions;
  time_multiplier = other6.time_multiplier;
  mem_multiplier = other6.mem_multiplier;
  compile_script = other6.compile_script;
  run_script = other6.run_script;
  script_last_update = other6.script_last_update;
  __isset = other6.__isset;
}
Language& Language::operator=(const Language& other7) {
  id = other7.id;
  name = other7.name;
  extensions = other7.extensions;
  time_multiplier = other7.time_multiplier;
  mem_multiplier = other7.mem_multiplier;
  compile_script = other7.compile_script;
  run_script = other7.run_script;
  script_last_update = other7.script_last_update;
  __isset = other7.__isset;
  return *this;
}
void Language::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Language(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "extensions=" << to_string(extensions);
  out << ", " << "time_multiplier="; (__isset.time_multiplier ? (out << to_string(time_multiplier)) : (out << "<null>"));
  out << ", " << "mem_multiplier="; (__isset.mem_multiplier ? (out << to_string(mem_multiplier)) : (out << "<null>"));
  out << ", " << "compile_script="; (__isset.compile_script ? (out << to_string(compile_script)) : (out << "<null>"));
  out << ", " << "run_script="; (__isset.run_script ? (out << to_string(run_script)) : (out << "<null>"));
  out << ", " << "script_last_update="; (__isset.script_last_update ? (out << to_string(script_last_update)) : (out << "<null>"));
  out << ")";
}

}}} // namespace
