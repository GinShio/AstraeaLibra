/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "problem_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace astraea { namespace thrift { namespace data {


Problem::~Problem() noexcept {
}


void Problem::__set_id(const std::string& val) {
  this->id = val;
}

void Problem::__set_name(const std::string& val) {
  this->name = val;
}

void Problem::__set_ordinal(const int32_t val) {
  this->ordinal = val;
}

void Problem::__set_is_public(const bool val) {
  this->is_public = val;
}

void Problem::__set_detail(const std::string& val) {
  this->detail = val;
}

void Problem::__set_mime(const std::string& val) {
  this->mime = val;
}

void Problem::__set_time(const int32_t val) {
  this->time = val;
}

void Problem::__set_memory(const int32_t val) {
  this->memory = val;
}

void Problem::__set_label(const std::string& val) {
  this->label = val;
__isset.label = true;
}

void Problem::__set_rgb(const std::string& val) {
  this->rgb = val;
__isset.rgb = true;
}

void Problem::__set_category(const std::string& val) {
  this->category = val;
__isset.category = true;
}

void Problem::__set_tag(const std::vector<std::string> & val) {
  this->tag = val;
__isset.tag = true;
}

void Problem::__set_total(const int32_t val) {
  this->total = val;
__isset.total = true;
}

void Problem::__set_ac(const int32_t val) {
  this->ac = val;
__isset.ac = true;
}

void Problem::__set_testcase(const int32_t val) {
  this->testcase = val;
__isset.testcase = true;
}
std::ostream& operator<<(std::ostream& out, const Problem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Problem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;
  bool isset_name = false;
  bool isset_ordinal = false;
  bool isset_is_public = false;
  bool isset_detail = false;
  bool isset_mime = false;
  bool isset_time = false;
  bool isset_memory = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ordinal);
          isset_ordinal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_public);
          isset_is_public = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->detail);
          isset_detail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mime);
          isset_mime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->time);
          isset_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->memory);
          isset_memory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->label);
          this->__isset.label = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rgb);
          this->__isset.rgb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->category);
          this->__isset.category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tag.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->tag.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->tag[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->total);
          this->__isset.total = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ac);
          this->__isset.ac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->testcase);
          this->__isset.testcase = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ordinal)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_is_public)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_detail)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_mime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_time)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_memory)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Problem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Problem");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ordinal", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->ordinal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_public", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->is_public);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("detail", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->detail);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mime", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->mime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("memory", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->memory);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.label) {
    xfer += oprot->writeFieldBegin("label", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->label);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rgb) {
    xfer += oprot->writeFieldBegin("rgb", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->rgb);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.category) {
    xfer += oprot->writeFieldBegin("category", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->category);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tag) {
    xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_LIST, 12);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tag.size()));
      std::vector<std::string> ::const_iterator _iter5;
      for (_iter5 = this->tag.begin(); _iter5 != this->tag.end(); ++_iter5)
      {
        xfer += oprot->writeString((*_iter5));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.total) {
    xfer += oprot->writeFieldBegin("total", ::apache::thrift::protocol::T_I32, 13);
    xfer += oprot->writeI32(this->total);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ac) {
    xfer += oprot->writeFieldBegin("ac", ::apache::thrift::protocol::T_I32, 14);
    xfer += oprot->writeI32(this->ac);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.testcase) {
    xfer += oprot->writeFieldBegin("testcase", ::apache::thrift::protocol::T_I32, 15);
    xfer += oprot->writeI32(this->testcase);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Problem &a, Problem &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.ordinal, b.ordinal);
  swap(a.is_public, b.is_public);
  swap(a.detail, b.detail);
  swap(a.mime, b.mime);
  swap(a.time, b.time);
  swap(a.memory, b.memory);
  swap(a.label, b.label);
  swap(a.rgb, b.rgb);
  swap(a.category, b.category);
  swap(a.tag, b.tag);
  swap(a.total, b.total);
  swap(a.ac, b.ac);
  swap(a.testcase, b.testcase);
  swap(a.__isset, b.__isset);
}

Problem::Problem(const Problem& other6) {
  id = other6.id;
  name = other6.name;
  ordinal = other6.ordinal;
  is_public = other6.is_public;
  detail = other6.detail;
  mime = other6.mime;
  time = other6.time;
  memory = other6.memory;
  label = other6.label;
  rgb = other6.rgb;
  category = other6.category;
  tag = other6.tag;
  total = other6.total;
  ac = other6.ac;
  testcase = other6.testcase;
  __isset = other6.__isset;
}
Problem& Problem::operator=(const Problem& other7) {
  id = other7.id;
  name = other7.name;
  ordinal = other7.ordinal;
  is_public = other7.is_public;
  detail = other7.detail;
  mime = other7.mime;
  time = other7.time;
  memory = other7.memory;
  label = other7.label;
  rgb = other7.rgb;
  category = other7.category;
  tag = other7.tag;
  total = other7.total;
  ac = other7.ac;
  testcase = other7.testcase;
  __isset = other7.__isset;
  return *this;
}
void Problem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Problem(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "ordinal=" << to_string(ordinal);
  out << ", " << "is_public=" << to_string(is_public);
  out << ", " << "detail=" << to_string(detail);
  out << ", " << "mime=" << to_string(mime);
  out << ", " << "time=" << to_string(time);
  out << ", " << "memory=" << to_string(memory);
  out << ", " << "label="; (__isset.label ? (out << to_string(label)) : (out << "<null>"));
  out << ", " << "rgb="; (__isset.rgb ? (out << to_string(rgb)) : (out << "<null>"));
  out << ", " << "category="; (__isset.category ? (out << to_string(category)) : (out << "<null>"));
  out << ", " << "tag="; (__isset.tag ? (out << to_string(tag)) : (out << "<null>"));
  out << ", " << "total="; (__isset.total ? (out << to_string(total)) : (out << "<null>"));
  out << ", " << "ac="; (__isset.ac ? (out << to_string(ac)) : (out << "<null>"));
  out << ", " << "testcase="; (__isset.testcase ? (out << to_string(testcase)) : (out << "<null>"));
  out << ")";
}

}}} // namespace
