/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef submission_TYPES_H
#define submission_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace astraea { namespace thrift { namespace data {

class Submission;

typedef struct _Submission__isset {
  _Submission__isset() : message(false) {}
  bool message :1;
} _Submission__isset;

class Submission : public virtual ::apache::thrift::TBase {
 public:

  Submission(const Submission&);
  Submission& operator=(const Submission&);
  Submission() : id(), problem(), language(), submitter(), code(), judgement(), message() {
  }

  virtual ~Submission() noexcept;
  std::string id;
  std::string problem;
  std::string language;
  std::string submitter;
  std::string code;
  std::string judgement;
  std::string message;

  _Submission__isset __isset;

  void __set_id(const std::string& val);

  void __set_problem(const std::string& val);

  void __set_language(const std::string& val);

  void __set_submitter(const std::string& val);

  void __set_code(const std::string& val);

  void __set_judgement(const std::string& val);

  void __set_message(const std::string& val);

  bool operator == (const Submission & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(problem == rhs.problem))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(submitter == rhs.submitter))
      return false;
    if (!(code == rhs.code))
      return false;
    if (!(judgement == rhs.judgement))
      return false;
    if (__isset.message != rhs.__isset.message)
      return false;
    else if (__isset.message && !(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const Submission &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Submission & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Submission &a, Submission &b);

std::ostream& operator<<(std::ostream& out, const Submission& obj);

}}} // namespace

#endif
