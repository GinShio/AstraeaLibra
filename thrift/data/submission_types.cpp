/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "submission_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace astraea { namespace thrift { namespace data {


Submission::~Submission() noexcept {
}


void Submission::__set_id(const std::string& val) {
  this->id = val;
}

void Submission::__set_problem(const std::string& val) {
  this->problem = val;
}

void Submission::__set_language(const std::string& val) {
  this->language = val;
}

void Submission::__set_submitter(const std::string& val) {
  this->submitter = val;
}

void Submission::__set_code(const std::string& val) {
  this->code = val;
}

void Submission::__set_judgement(const std::string& val) {
  this->judgement = val;
}

void Submission::__set_message(const std::string& val) {
  this->message = val;
__isset.message = true;
}
std::ostream& operator<<(std::ostream& out, const Submission& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Submission::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;
  bool isset_problem = false;
  bool isset_language = false;
  bool isset_submitter = false;
  bool isset_code = false;
  bool isset_judgement = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->problem);
          isset_problem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->language);
          isset_language = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->submitter);
          isset_submitter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->code);
          isset_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->judgement);
          isset_judgement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_problem)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_language)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_submitter)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_judgement)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Submission::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Submission");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("problem", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->problem);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("language", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->language);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("submitter", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->submitter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("judgement", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->judgement);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 15);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Submission &a, Submission &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.problem, b.problem);
  swap(a.language, b.language);
  swap(a.submitter, b.submitter);
  swap(a.code, b.code);
  swap(a.judgement, b.judgement);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

Submission::Submission(const Submission& other0) {
  id = other0.id;
  problem = other0.problem;
  language = other0.language;
  submitter = other0.submitter;
  code = other0.code;
  judgement = other0.judgement;
  message = other0.message;
  __isset = other0.__isset;
}
Submission& Submission::operator=(const Submission& other1) {
  id = other1.id;
  problem = other1.problem;
  language = other1.language;
  submitter = other1.submitter;
  code = other1.code;
  judgement = other1.judgement;
  message = other1.message;
  __isset = other1.__isset;
  return *this;
}
void Submission::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Submission(";
  out << "id=" << to_string(id);
  out << ", " << "problem=" << to_string(problem);
  out << ", " << "language=" << to_string(language);
  out << ", " << "submitter=" << to_string(submitter);
  out << ", " << "code=" << to_string(code);
  out << ", " << "judgement=" << to_string(judgement);
  out << ", " << "message="; (__isset.message ? (out << to_string(message)) : (out << "<null>"));
  out << ")";
}

}}} // namespace
