/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef language_TYPES_H
#define language_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace astraea { namespace thrift { namespace data {

class Language;

typedef struct _Language__isset {
  _Language__isset() : time_multiplier(true), mem_multiplier(true), compile_script(false), run_script(false), script_last_update(false) {}
  bool time_multiplier :1;
  bool mem_multiplier :1;
  bool compile_script :1;
  bool run_script :1;
  bool script_last_update :1;
} _Language__isset;

class Language : public virtual ::apache::thrift::TBase {
 public:

  Language(const Language&);
  Language& operator=(const Language&);
  Language() : id(), name(), time_multiplier(1.0000000000000000), mem_multiplier(1.0000000000000000), compile_script(), run_script(), script_last_update() {
  }

  virtual ~Language() noexcept;
  std::string id;
  std::string name;
  std::vector<std::string>  extensions;
  double time_multiplier;
  double mem_multiplier;
  std::string compile_script;
  std::string run_script;
  std::string script_last_update;

  _Language__isset __isset;

  void __set_id(const std::string& val);

  void __set_name(const std::string& val);

  void __set_extensions(const std::vector<std::string> & val);

  void __set_time_multiplier(const double val);

  void __set_mem_multiplier(const double val);

  void __set_compile_script(const std::string& val);

  void __set_run_script(const std::string& val);

  void __set_script_last_update(const std::string& val);

  bool operator == (const Language & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(extensions == rhs.extensions))
      return false;
    if (__isset.time_multiplier != rhs.__isset.time_multiplier)
      return false;
    else if (__isset.time_multiplier && !(time_multiplier == rhs.time_multiplier))
      return false;
    if (__isset.mem_multiplier != rhs.__isset.mem_multiplier)
      return false;
    else if (__isset.mem_multiplier && !(mem_multiplier == rhs.mem_multiplier))
      return false;
    if (__isset.compile_script != rhs.__isset.compile_script)
      return false;
    else if (__isset.compile_script && !(compile_script == rhs.compile_script))
      return false;
    if (__isset.run_script != rhs.__isset.run_script)
      return false;
    else if (__isset.run_script && !(run_script == rhs.run_script))
      return false;
    if (__isset.script_last_update != rhs.__isset.script_last_update)
      return false;
    else if (__isset.script_last_update && !(script_last_update == rhs.script_last_update))
      return false;
    return true;
  }
  bool operator != (const Language &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Language & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Language &a, Language &b);

std::ostream& operator<<(std::ostream& out, const Language& obj);

}}} // namespace

#endif
