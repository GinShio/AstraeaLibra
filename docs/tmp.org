* Libra
** 基础构思
*** 初始化
  - 创建基础目录，并向服务器获取 COMPILER_SCRIPT、SECCOMP_RULE
  - 启用 $thread - 2 < 1 ? 1 : (thread - 2)$ 个线程作为 worker，每个 worker 一个独立的 id (UUID5)，在线程内初始化 thread_local 的 Sandbox
*** 运行
  - master 使用 *事件循环* 获取新任务并为 worker 分配任务
  - worker 通过 Sandbox 进行编译与运行用户提交的代码，并将结果输出

** PATH
*** base
|-----------------+-----------------------+------+-------+------|
| NAME            | PATH                  | USER | GROUP | PERM |
|-----------------+-----------------------+------+-------+------|
| PROJECT_PATH    | =/astraea=            | root | root  | 0700 |
| COMPILER_SCRIPT | =/astraea/compiler=   | root | root  | 0755 |
| JUDEGER_WORKER  | =/astraea/judger/:id= | root | root  | 0755 |
| PROBLEM_ANS     | =/astraea/problem=    | root | root  | 0755 |
| SECCOMP_RULE    | =/astraea/seccomp=    | root | root  | 0755 |
*** judger
|-------------+-------------------------------+--------+--------+------|
| NAME        | PATH                          | USER   | GROUP  | PERM |
|-------------+-------------------------------+--------+--------+------|
| MOUNT_POINT | =/astraea/judger/:id/:submit= | nobody | nobody | 0700 |

** Sandbox
Sandbox 使用 *CGroup* 、 *Namespaces* 实现资源的限制与隔离，使用 *Seccomp-BPF* 实现系统调用限制，运行时间限制目前没有考虑

Sandbox 具体操作如下：
  - 在 worker 中进行初步的初始化
  - 根据获取到的任务进行资源限制工作
  - CLONE 出新进程，并进行对资源进行进一步限制与隔离
  - 处理用户代码前将权限修改为 *nobody* 并修改根目录到 MOUNT_POINT，将题目信息挂载到
  - 获取最终结果，并清理 Sandbox
